/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java Library project to get you started.
 * For more details take a look at the Java Libraries chapter in the Gradle
 * User Manual available at https://docs.gradle.org/6.3/userguide/java_library_plugin.html
 */

plugins {
    // Apply the java-library plugin to add support for Java Library
    id 'java-library'
}

//MainClass:
String mainClass = 'imdb.searcher.TcpListener'
//Arquivo de configuração properties do servidor. (se necessário)
File fileProperties = new File('../server.properties');
//Configuração padrão do manifest.
def myManifest = manifest {
    attributes 'Implementation-Title': 'Searcher IMDb',
            'Implementation-Version': version,
            'Main-Class': mainClass
}
 

repositories {
    // Use jcenter for resolving dependencies.
    // You can declare any Maven/Ivy/file repository here.
    jcenter()
}

dependencies {
    // This dependency is exported to consumers, that is to say found on their compile classpath.
    api 'org.apache.commons:commons-math3:3.6.1'

    // This dependency is used internally, and not exposed to consumers on their own compile classpath.
    implementation 'com.google.guava:guava:28.2-jre'

    // Use JUnit test framework
    testImplementation 'junit:junit:4.12'
    
    // Dependencia do JSOUP
    implementation 'org.jsoup:jsoup:1.13.1'
    
    implementation fileTree(include: ['*.jar'], dir: 'libs')
}

/**
 * Task responsavel pela execução do MainClass diretamente do projeto.
 */
task execute(type: JavaExec) {
    main = mainClass
    classpath = sourceSets.main.runtimeClasspath
}
 
/**
 * Task responsavel em gerar o jar;
 */
jar {
    manifest {
        manifest = myManifest
        manifest.attributes "Class-Path": configurations.compileClasspath.collect {
            'libs/' + it.getName()
        }.join(' ')
    }
}
 
/**
 * Task responsavel pela geração do fatJar (todas dependencais em um unico jar)
 */
task fatJar(type: Jar, group: "build") {
    manifest = myManifest
    archiveBaseName = project.name
    from { configurations.compileClasspath.collect { it.isDirectory() ? it : zipTree(it) } }
    with jar
}
 
/**
 * Task responsavel em fechar a versão do fatJar e compacta-la.
 */
task makeDistFatJar(type: Zip, dependsOn: [clean, fatJar], group: "dist") {
    from "$buildDir/libs"
    from fileProperties
}
 
/**
 * Task responsavel em fechar a versão e compacta-la.
 */
task makeDist(type: Zip, dependsOn: [clean, jar], group: "dist") {
    from jar.archivePath
    from fileProperties
    into('libs') {
        from configurations.runtime
    }
}